// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "bassoon/internal/app/model"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetPort mocks base method
func (m *MockRepository) GetPort(ctx context.Context, portID string) (*model.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPort", ctx, portID)
	ret0, _ := ret[0].(*model.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPort indicates an expected call of GetPort
func (mr *MockRepositoryMockRecorder) GetPort(ctx, portID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPort", reflect.TypeOf((*MockRepository)(nil).GetPort), ctx, portID)
}

// IsPortExists mocks base method
func (m *MockRepository) IsPortExists(ctx context.Context, portID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPortExists", ctx, portID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsPortExists indicates an expected call of IsPortExists
func (mr *MockRepositoryMockRecorder) IsPortExists(ctx, portID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPortExists", reflect.TypeOf((*MockRepository)(nil).IsPortExists), ctx, portID)
}

// CreatePort mocks base method
func (m *MockRepository) CreatePort(ctx context.Context, port *model.Port) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePort", ctx, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePort indicates an expected call of CreatePort
func (mr *MockRepositoryMockRecorder) CreatePort(ctx, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePort", reflect.TypeOf((*MockRepository)(nil).CreatePort), ctx, port)
}

// UpdatePort mocks base method
func (m *MockRepository) UpdatePort(ctx context.Context, port *model.Port) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePort", ctx, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePort indicates an expected call of UpdatePort
func (mr *MockRepositoryMockRecorder) UpdatePort(ctx, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePort", reflect.TypeOf((*MockRepository)(nil).UpdatePort), ctx, port)
}
